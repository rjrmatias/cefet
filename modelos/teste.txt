http://faroit.com/keras-docs/0.3.3/examples/
https://www.kaggle.com/ngyptr/multi-class-classification-with-lstm
https://www.opencodez.com/python/text-classification-using-keras.htm
https://www.kaggle.com/shivamb/beginners-guide-to-text-generation-using-lstms
https://www.kaggle.com/kredy10/simple-lstm-for-text-classification
https://github.com/fchollet/keras-resources

https://cloud.google.com/blog/products/gcp/intro-to-text-classification-with-keras-automatically-tagging-stack-overflow-posts
https://www.kaggle.com/thomasnelson/working-with-dna-sequence-data-for-ml

https://mloss.org/software/
https://adventuresinmachinelearning.com/recurrent-neural-networks-lstm-tutorial-tensorflow/
https://becominghuman.ai/a-noobs-guide-to-implementing-rnn-lstm-using-tensorflow-1907a5bbb1fa


http://www.insightsbot.com/blog/1wAqZg/keras-lstm-example-sequence-binary-classification

https://towardsdatascience.com/sentiment-analysis-using-lstm-step-by-step-50d074f09948

https://medium.com/@sabber/classifying-yelp-review-comments-using-lstm-and-word-embeddings-part-1-eb2275e4066b

https://towardsdatascience.com/understanding-lstm-and-its-quick-implementation-in-keras-for-sentiment-analysis-af410fd85b47

https://towardsdatascience.com/understanding-lstm-and-its-quick-implementation-in-keras-for-sentiment-analysis-af410fd85b47


https://towardsdatascience.com/understanding-lstm-and-its-quick-implementation-in-keras-for-sentiment-analysis-af410fd85b47




max_fatures = 2500
tokenizer = Tokenizer(num_words=max_fatures, split=' ')
tokenizer.fit_on_texts(data['Sequence'].values)
X = tokenizer.texts_to_sequences(data['Sequence'].values)
X = pad_sequences(X)

embed_dim = 128
lstm_out = 196

model = Sequential()
model.add(Embedding(max_fatures, embed_dim,input_length = X.shape[1]))
model.add(SpatialDropout1D(0.4))
model.add(LSTM(lstm_out, dropout=0.2, recurrent_dropout=0.2))
model.add(Dense(2,activation='softmax'))
model.compile(loss = 'categorical_crossentropy', optimizer='adam',metrics = ['accuracy'])
print(model.summary())

Y = pd.get_dummies(data['essencial']).values
X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.33, random_state = 42)
print(X_train.shape,Y_train.shape)
print(X_test.shape,Y_test.shape)

batch_size = 32
model.fit(X_train, Y_train, epochs = 7, batch_size=batch_size, verbose = 2)

validation_size = 1500
X_validate = X_test[-validation_size:]
Y_validate = Y_test[-validation_size:]
X_test = X_test[:-validation_size]
Y_test = Y_test[:-validation_size]

score,acc = model.evaluate(X_test, Y_test, verbose = 2, batch_size = batch_size)
print("score: %.2f" % (score))
print("acc: %.2f" % (acc))

--------------------------


'P0AG55','P0A7R1','P75817','P36999','P63177','P0C0R7','P60422','P60438','P76104','P0A7L3'


ssh -p 49186 rmatias@aldebaran.eic.cefet-rj.br  
pass: snK-F77ZHD

SHA256:m2T2CSQY7NnXQekTnZOGSOQVjVKUiES7RloK4Qufeyo

|1|3qxIfROxlF5YsOt6d7jnNhYo4y8=|ee+4ROhcjarlugW7G0nSrZK/v84= ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBHtV6RkHNn6cdAkf4//2r5o9gg6Q5J7mjfTSENscdgWcUFusNEBEo6P7WXT1wzrcLxVuymMd6FMpZGPMIj7+J4g=
|1|ehoU8JUgoHql6ZSPg25XIaFJC1M=|OYyYmIr1VMDnrLIt0X7dIVccHd8= ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBHtV6RkHNn6cdAkf4//2r5o9gg6Q5J7mjfTSENscdgWcUFusNEBEo6P7WXT1wzrcLxVuymMd6FMpZGPMIj7+J4g=
|1|fIyxhxbqiN0JBD01Ahwvtg6IJNQ=|M/tamPlOHJLm3fYDspicOqjgUHU= ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBHtV6RkHNn6cdAkf4//2r5o9gg6Q5J7mjfTSENscdgWcUFusNEBEo6P7WXT1wzrcLxVuymMd6FMpZGPMIj7+J4g=
|1|gp1y5eqIlJ0C/K7Xctm8fWks03E=|qYUN1s7NXjnhde9LfXp4dM8J6j0= ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBHtV6RkHNn6cdAkf4//2r5o9gg6Q5J7mjfTSENscdgWcUFusNEBEo6P7WXT1wzrcLxVuymMd6FMpZGPMIj7+J4g=


